#BlueJ class context
comment0.params=worldWidth\ worldHeight\ worldCellSize
comment0.target=TwoPlayerUserInfo(int,\ int,\ int)
comment0.text=\n\ Create\ a\ new\ TwoPlayerUserInfo\ to\ act\ as\ a\ mediator\ to\ UserInfo.\ Should\ only\ create\ one.\ Takes\ a\ moment\ to\ store\ UserInfo\ to\ reset\ any\ previous\ states,\ so\ create\ this\ at\ beginning\ of\ scenario.\n\ The\ UserInfo\ class\ should\ not\ be\ used.\n\ Features\:\ ???\n\ @param\ worldWidth\ The\ width\ of\ the\ user-selection\ "lobby"\ World\ (to\ match\ own\ World\ size).\n\ @param\ worldHeight\ The\ height\ of\ the\ user-selection\ "lobby"\ World\ (to\ match\ own\ World\ size).\n\ @param\ worldCellSize\ The\ cellSize\ of\ the\ user-selection\ "lobby"\ World\ (to\ match\ own\ World\ size).\n
comment1.params=time
comment1.target=void\ threadSleep(long)
comment10.params=threadNumber
comment10.target=boolean\ checkToDisconnect(int)
comment11.params=
comment11.target=java.util.List\ getAll()
comment11.text=\n\ Takes\ the\ place\ of\ UserInfo.getTop(int)\ and\ UserInfo.getNearby(int).\n\ Remember\ that\ int\ with\ index\ 9\ is\ reserved\ for\ the\ operations\ of\ TwoPlayerUserInfo.\n\ Remember\ that\ the\ score\ field\ is\ reserved\ for\ the\ operations\ of\ TwoPlayerUserInfo.\n\ Remember\ that\ String\ with\ index\ 4\ is\ reserved\ for\ the\ operations\ of\ TwoPlayerUserInfo\ during\ the\ time\ of\ pairing.\n\ @return\ List\ of\ all\ UserInfos\ stored\ for\ the\ scenario.\n\ @see\ getUserImageFor(String)\n
comment12.params=index
comment12.target=int\ getInt(int)
comment12.text=\n\ Takes\ the\ place\ of\ UserInfo.getInt(int)\ for\ the\ current\ user.\ Should\ only\ be\ used\ to\ retrieve\ data\ for\ the\ current\ user\ (like\ achievements,\ score,\ settings,\ progress,\ etc.).\n\ Remember\ that\ int\ with\ index\ 9\ is\ reserved\ for\ the\ operations\ of\ TwoPlayerUserInfo.\n
comment13.params=index\ value
comment13.target=void\ setInt(int,\ int)
comment13.text=\n\ Takes\ the\ place\ of\ UserInfo.setInt(int,\ int).\ Should\ NOT\ be\ used\ to\ communicate\ with\ opponent.\ Should\ only\ be\ used\ to\ store\ data\ for\ the\ current\ user\ (like\ achievements,\ score,\ settings,\ progress,\ etc.).\n\ Be\ mindful\ of\ fields\ used\ with\ sendMessage.\n\ Remember\ that\ int\ with\ index\ 9\ is\ reserved\ for\ the\ operations\ of\ TwoPlayerUserInfo.\n\ @see\ store()\n\ @see\ sendMessage(Integer[],\ String[])\n
comment14.params=index
comment14.target=void\ checkIntIndex(int)
comment15.params=index
comment15.target=java.lang.String\ getString(int)
comment15.text=\n\ Takes\ the\ place\ of\ UserInfo.getString(int)\ for\ the\ current\ user.\n\ Remember\ that\ String\ with\ index\ 4\ is\ reserved\ for\ the\ operations\ of\ TwoPlayerUserInfo\ during\ the\ time\ of\ pairing.\n
comment16.params=index\ value
comment16.target=void\ setString(int,\ java.lang.String)
comment16.text=\n\ Takes\ the\ place\ of\ UserInfo.setString(int,\ String).\ Should\ NOT\ be\ used\ to\ communicate\ with\ opponent.\ Should\ only\ be\ used\ to\ store\ data\ for\ the\ current\ user\ (like\ achievements,\ score,\ settings,\ progress,\ etc.).\n\ Be\ mindful\ of\ fields\ used\ with\ sendMessage.\n\ Remember\ that\ String\ with\ index\ 4\ is\ reserved\ for\ the\ operations\ of\ TwoPlayerUserInfo\ during\ the\ time\ of\ pairing.\n\ @see\ store()\n\ @see\ sendMessage(Integer[],\ String[])\n
comment17.params=
comment17.target=void\ store()
comment17.text=\n\ Takes\ the\ place\ of\ UserInfo.store().\ Should\ NOT\ be\ used\ to\ communicate\ with\ opponent.\ Should\ only\ be\ used\ to\ store\ data\ for\ the\ current\ user\ (like\ achievements,\ score,\ settings,\ progress,\ etc.).\n\ Be\ mindful\ of\ fields\ used\ with\ sendMessage.\n\ @see\ setInt(int,\ int)\n\ @see\ setString(int,\ String)\n\ @see\ sendMessage(Integer[],\ String[])\n
comment18.params=
comment18.target=boolean\ isReadyToSend()
comment18.text=\n\ @return\ Whether\ currently\ able\ to\ send\ a\ message.\n\ @see\ sendMessage(Integer[],\ String[])\n
comment19.params=ints\ strings
comment19.target=void\ sendMessage(java.lang.Integer[],\ java.lang.String[])
comment19.text=\n\ Send\ data\ to\ opponent.\n\ Use\ null\ for\ entries\ you\ do\ not\ wish\ to\ include\ as\ the\ message\ being\ sent.\n\ Remember\ that\ int\ with\ index\ 9\ is\ reserved\ for\ the\ operations\ of\ TwoPlayerUserInfo.\n\ @param\ ints\ Should\ be\ null\ or\ of\ length\ no\ more\ than\ 9.\ If\ not\ null,\ array\ entries\ that\ are\ null\ are\ not\ included\ in\ message.\ And\ if\ array\ length\ is\ less\ than\ max,\ excluded\ entries\ are\ considered\ null.\n\ @param\ strings\ Should\ be\ null\ or\ of\ length\ no\ more\ than\ 5.\ If\ not\ null,\ array\ entries\ that\ are\ null\ are\ not\ included\ in\ message.\ And\ if\ array\ length\ is\ less\ than\ max,\ excluded\ entries\ are\ considered\ null.\n\ @see\ isReadyToSend()\n
comment2.params=
comment2.target=void\ scenearioStopped()
comment2.text=\n\ To\ be\ called\ from\ every\ World's\ stopped()\ method.\ Helps\ to\ allow\ threads\ to\ sleep\ when\ the\ scenario\ is\ paused.\n\ @see\ scenarioStarted()\n
comment20.params=
comment20.target=java.lang.String\ getNewActivityDataToStore()
comment21.params=
comment21.target=boolean\ hasMessage()
comment21.text=\n\ Check\ if\ messages\ sent\ by\ opponent\ is\ waiting.\n\ @return\ Whether\ currently\ a\ message\ has\ been\ received\ from\ opponent.\n\ @see\ getMessage()\n
comment22.params=
comment22.target=MessageContents\ getMessage()
comment22.text=\n\ Get\ data\ sent\ by\ opponent.\n\ @return\ A\ data\ structure\ representing\ the\ message\ received\ by\ opponent,\ with\ methods\ hasInt(int),\ getInt(int),\ hasString(int),\ getString(int)\n\ @see\ hasMessage()\n
comment23.params=userName\ image
comment23.target=void\ storeUserImage(java.lang.String,\ greenfoot.GreenfootImage)
comment24.params=userName
comment24.target=greenfoot.GreenfootImage\ getUserImageFor(java.lang.String)
comment24.text=\n\ Retrieve\ user\ image\ from\ cache.\n\ @param\ userName\ Name\ of\ user.\n\ @return\ The\ user\ image\ associated\ with\ the\ specified\ user.\ Null\ if\ user\ does\ not\ exist\ or\ has\ not\ been\ spotted\ as\ being\ online\ yet.\n
comment25.params=userName
comment25.target=greenfoot.GreenfootImage\ getSmallUserImageFor(java.lang.String)
comment26.params=userName
comment26.target=TwoPlayerUserInfo.OnlinePresence\ getOnlinePresenceFor(java.lang.String)
comment27.params=image\ w\ h
comment27.target=greenfoot.GreenfootImage\ scale(greenfoot.GreenfootImage,\ int,\ int)
comment28.params=worldToReturnTo
comment28.target=void\ enterLobby(greenfoot.World)
comment28.text=\n\ Switches\ the\ World\ to\ UserLobby\ where\ the\ user\ may\ select\ a\ user\ to\ play\ with.\ May\ pause\ a\ moment\ if\ not\ already\ disconnected\ from\ a\ previous\ connection.\n\ @param\ worldToReturnTo\ The\ World\ that\ Greenfoot\ will\ switch\ to\ after\ finished\ selecting\ user\ to\ play\ with.\n
comment3.params=
comment3.target=void\ scenarioStarted()
comment3.text=\n\ To\ be\ called\ from\ every\ World's\ started()\ method.\ Helps\ to\ allow\ threads\ to\ sleep\ when\ the\ scenario\ is\ paused.\n\ @see\ scenearioStopped()\n
comment4.params=
comment4.target=boolean\ isPaired()
comment4.text=\n\ @return\ Whether\ paired\ with\ another\ user.\ True\ if\ communication\ is\ in\ place\ with\ opponent.\n
comment5.params=
comment5.target=java.lang.String\ getMyName()
comment6.params=
comment6.target=java.lang.String\ getOpponentName()
comment6.text=\n\ @return\ The\ name\ of\ the\ user\ that\ the\ current\ user\ is/was\ paired\ with.\n
comment7.params=
comment7.target=int\ getTimeSinceOpponentLastActivity()
comment7.text=\n\ @return\ Time\ in\ seconds.\n
comment8.params=
comment8.target=java.lang.String\ getTimeSinceOpponentLastActivityAsString()
comment8.text=\n\ @return\ Formatted\ time\ in\ seconds,\ minutes,\ and\ hours.\n
comment9.params=
comment9.target=void\ disconnect()
comment9.text=\n\ Disconnect\ from\ pairing\ with\ opponent.\ Should\ be\ called\ to\ end\ communication\ with\ opponent,\ and\ before\ entering\ lobby\ again.\n
numComments=29
